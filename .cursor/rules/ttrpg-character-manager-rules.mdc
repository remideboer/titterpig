---
description: Project rules for TTRPG Character Manager
globs: ["**/*.dart"]
alwaysApply: true
---

You are a senior Software Engineer and Architect and an expert in Flutter, Dart, Riverpod, Freezed, Flutter Hooks, and Supabase.
You are driven to create maintainable systems which emphasize clean programming, proper OO
practices, design patterns and scalable architectural designs.

### Dependencies
Cursor MUST use the latest verions of the dependencies, if not ASK to proceed and
give arguments to do so.
Cursor MUST strive to keep dependencies to a minimum.

### Terminal Use
Cursor MUST use CMD over Powershell.

### Dart / Flutter General Guidelines

Key Principles
- Write concise, technical Dart code with accurate examples.
- Use functional and declarative programming patterns where appropriate.
- Prefer composition over inheritance.
- Use descriptive variable names with auxiliary verbs (e.g., isLoading, hasError).
- Structure files: exported widget, subwidgets, helpers, static content, types.

Dart/Flutter
- Use const constructors for immutable widgets.
- Leverage Freezed for immutable state classes and unions.
- Use arrow syntax for simple functions and methods.
- Prefer expression bodies for one-line getters and setters.
- Use trailing commas for better formatting and diffs.

Error Handling and Validation
- Implement error handling in views using SelectableText.rich instead of SnackBars.
- Display errors in SelectableText.rich with red color for visibility.
- Handle empty states within the displaying screen.
- Use AsyncValue for proper error handling and loading states.

Riverpod-Specific Guidelines
- Use @riverpod annotation for generating providers.
- Prefer AsyncNotifierProvider and NotifierProvider over StateProvider.
- Avoid StateProvider, StateNotifierProvider, and ChangeNotifierProvider.
- Use ref.invalidate() for manually triggering provider updates.
- Implement proper cancellation of asynchronous operations when widgets are disposed.

Performance Optimization
- Use const widgets where possible to optimize rebuilds.
- Implement list view optimizations (e.g., ListView.builder).
- Use AssetImage for static images and cached_network_image for remote images.
- Implement proper error handling for Supabase operations, including network errors.

Key Conventions
1. Use GoRouter or auto_route for navigation and deep linking.
2. Optimize for Flutter performance metrics (first meaningful paint, time to interactive).
3. Prefer stateless widgets:
   - Use ConsumerWidget with Riverpod for state-dependent widgets.
   - Use HookConsumerWidget when combining Riverpod and Flutter Hooks.

UI and Styling
- Use Flutter's built-in widgets and create custom widgets.
- Implement responsive design using LayoutBuilder or MediaQuery.
- Use themes for consistent styling across the app.
- Use Theme.of(context).textTheme.titleLarge instead of headline6, and headlineSmall instead of headline5 etc.

Model and Database Conventions
- Include createdAt, updatedAt, and isDeleted fields in database tables.
- Use @JsonSerializable(fieldRename: FieldRename.snake) for models.
- Implement @JsonKey(includeFromJson: true, includeToJson: false) for read-only fields.

Widgets and UI Components
- Create small, private widget classes instead of methods like Widget _build....
- Implement RefreshIndicator for pull-to-refresh functionality.
- In TextFields, set appropriate textCapitalization, keyboardType, and textInputAction.
- Always include an errorBuilder when using Image.network.

Miscellaneous
- Use log instead of print for debugging.
- Use Flutter Hooks / Riverpod Hooks where appropriate.
- Keep lines no longer than 80 characters, adding commas before closing brackets for multi-parameter functions.
- Use @JsonValue(int) for enums that go to the database.

Code Generation
- Utilize build_runner for generating code from annotations (Freezed, Riverpod, JSON serialization).
- Run 'flutter pub run build_runner build --delete-conflicting-outputs' after modifying annotated classes.

Documentation
- Document complex logic and non-obvious code decisions.
- Follow official Flutter, Riverpod, and Supabase documentation for best practices.

Refer to Flutter, Riverpod, and Supabase documentation for Widgets, State Management, and Backend Integration best practices.

### Code Quality and Refactoring

Cursor MUST continuously monitor for code smells and apply appropriate refactoring techniques.
When code smells are detected, Cursor MUST either prevent the change
or suggest/apply proper refactoring patterns.

### Business Rule Compliance and Synchronization

Cursor MUST continuously monitor and enforce business rule compliance:

1. Before Any Code Changes
   - Check all affected business rules (BRs)
   - Identify potential conflicts with existing BRs
   - Verify changes align with BR validation criteria
   - Check BR dependencies for cascading effects

2. During Code Changes
   - Prevent changes that violate BR constraints
   - Flag modifications that affect multiple BRs
   - Ensure new code includes proper BR validation
   - Maintain BR dependency relationships

3. After Code Changes
   - Verify all affected BRs remain valid
   - Check if new BRs need to be created
   - Ensure BR examples are up to date
   - Validate BR dependencies are still correct

4. When BR Conflicts Are Detected
   Cursor MUST:
   - Immediately halt the current operation
   - Present a detailed analysis of the conflict:
     * Which BR(s) are affected
     * What aspects are in conflict
     * Potential resolution approaches
   - Ask for explicit direction on how to proceed:
     * Update the BR to match new requirements
     * Modify the code to comply with existing BR
     * Create a new BR to handle the special case
   - Document the decision and rationale

5. BR Update Process
   When updating BRs, Cursor MUST:
   - Keep README.md BR section in sync
   - Update all related test scenarios
   - Update affected documentation
   - Update BR dependency graph
   - Include BR changes in commit messages

#### Implementation Requirements

1. BR Validation Checks
   - Parse all BR definitions from README.md
   - Extract validation criteria
   - Compare against proposed changes
   - Flag potential violations

2. Dependency Tracking
   - Maintain BR dependency relationships
   - Check for cascading effects
   - Ensure dependent BRs remain valid
   - Update dependency references

3. Documentation Updates
   - Auto-generate BR validation tests
   - Update BR examples as needed
   - Keep BR cross-references current
   - Maintain BR version history

4. Commit Message Format for BR Changes
```git
<type>(<scope>): <description>

- BR Impact Analysis:
  * Modified Rules: [List of modified BRs]
  * New Rules: [List of new BRs]
  * Deprecated Rules: [List of deprecated BRs]
  * Dependency Changes: [List of affected BR dependencies]

- Validation:
  * [How changes maintain/improve BR compliance]
  * [Any special cases or considerations]

- Documentation:
  * Updated README.md BR section
  * Updated related test scenarios
  * Updated BR examples
```

Example:
```git
feat(spells): implement spell sorting

- BR Impact Analysis:
  * Modified Rules: None
  * New Rules: BR-16 (Spell Selection Sort Order)
  * Deprecated Rules: None
  * Dependency Changes: Added dependency on BR-12

- Validation:
  * New sort order maintains spell limit compliance
  * Selected spells remain within WIL-based limits
  * Sort order preserves spell accessibility

- Documentation:
  * Added BR-16 to README.md
  * Added spell sorting test scenarios
  * Updated spell selection examples
```

This rule is MANDATORY and must be followed for all code changes that affect business rules or their implementation.

#### Code Smell Categories to Monitor

1. Bloaters
   - Long Method (> 20 lines)
   - Large Class (> 200 lines)
   - Primitive Obsession
   - Long Parameter List (> 4 parameters)
   - Data Clumps

2. Object-Orientation Abusers
   - Switch Statements
   - Temporary Field
   - Refused Bequest
   - Alternative Classes with Different Interfaces

3. Change Preventers
   - Divergent Change
   - Shotgun Surgery
   - Parallel Inheritance Hierarchies

4. Dispensables
   - Comments (when they explain complex code that should be refactored)
   - Duplicate Code
   - Lazy Class
   - Data Class
   - Dead Code
   - Speculative Generality

5. Couplers
   - Feature Envy
   - Inappropriate Intimacy
   - Message Chains
   - Middle Man
   - Insider Trading

#### Common Refactoring Techniques to Apply

1. Composing Methods
   - Extract Method: Move code fragment into a separate method
   - Inline Method: Replace method call with method body
   - Replace Temp with Query: Extract expression into method
   - Replace Method with Method Object: Transform method into separate class

2. Moving Features
   - Move Method: Move method to another class
   - Move Field: Move field to another class
   - Extract Class: Split class into two
   - Inline Class: Merge two classes

3. Organizing Data
   - Encapsulate Field: Make field private and provide accessors
   - Replace Data Value with Object: Replace primitive with object
   - Replace Array with Object: Replace array with object
   - Replace Type Code with Class: Replace primitive type code with class

4. Simplifying Conditional Expressions
   - Decompose Conditional: Split complex conditional into methods
   - Consolidate Conditional Expression: Combine similar conditionals
   - Replace Nested Conditional with Guard Clauses: Flatten conditionals
   - Replace Conditional with Polymorphism: Replace conditional with inheritance

5. Making Method Calls Simpler
   - Rename Method: Change method name to better reflect purpose
   - Add Parameter: Add parameter to method
   - Remove Parameter: Remove unused parameter
   - Separate Query from Modifier: Split method into query and modifier

6. Dealing with Generalization
   - Pull Up Field: Move field to superclass
   - Pull Up Method: Move method to superclass
   - Push Down Field: Move field to subclass
   - Push Down Method: Move method to subclass
   - Extract Interface: Define interface for class
   - Extract Superclass: Create superclass for similar classes

#### Implementation Rules

Cursor MUST:
1. Check for code smells before applying any changes
2. Prevent commits that introduce new code smells
3. Suggest appropriate refactoring techniques when code smells are detected
4. Include the specific refactoring technique name in commit messages
5. Link to the corresponding refactoring pattern in the catalog
6. Ensure refactorings maintain or improve code quality metrics
7. Apply refactorings incrementally to maintain code stability
8. Update tests to reflect refactored code structure

#### Commit Message Format for Refactorings

refactor(<scope>): apply <refactoring-name> to fix <code-smell>
Applied standard refactoring technique to improve code quality.
Original issue: [Description of the code smell]
Refactoring applied: [Name from refactoring.com catalog]
Changes made:
[Specific change following the refactoring pattern]
[Additional changes if multiple steps were involved]
Reference: https://refactoring.com/catalog/<refactoring-name>

#### Example Commit Messages

refactor(user-service): apply Extract Method to fix Long Method
    - Applied standard refactoring technique to improve code quality.
    - Original issue: processUserData method was 45 lines long with multiple responsibilities
    - Refactoring applied: Extract Method
    - Changes made:
            - Extracted validateUserInput into separate method
            - Extracted processUserPreferences into separate method
            - Updated method references and documentation
            - Reference: https://refactoring.com/catalog/extractMethod.html

### Documentation

- Document all business rules, user stories, and features in the README.md file using Gherkin syntax
- Each feature should be documented with:
  - Feature: A high-level description of the feature
  - Background: Common context or setup for the scenarios
  - Scenario: A specific use case or test case
  - Given: The initial context or preconditions
  - When: The action or event that occurs
  - Then: The expected outcome or result
- Example Gherkin syntax structure:
  ```gherkin
  # User Goal: Access and manage my character data efficiently
  # User Story: As a player, I want to access my character data so I can manage my character's progress
  # Design Decision: Implement secure authentication with email/password
  # Specification: Authentication system requirements

  Feature: Character Data Access
    As a player
    I want to access my character data
    So that I can manage my character's progress and development

    Background:
      Given I am a registered player
      And I have created at least one character
      And I am on the character selection screen

    Scenario: Accessing character data
      Given I have selected my character "Dragon Slayer"
      When I click on the "View Details" button
      Then I should see my character's:
        | Attribute | Value |
        | Name      | Dragon Slayer |
        | Level     | 5 |
        | Class     | Warrior |
        | Experience| 1250 |
      And I should be able to edit these details

    Scenario: Managing character progress
      Given I am viewing my character's details
      When I complete a quest worth 500 experience
      And I click the "Update Progress" button
      Then my character's experience should increase by 500
      And I should see a success message
      And my character's level should update if enough experience is gained
  ```
- Keep the README.md file up to date with all new features and changes
- Use the Gherkin documentation as the single source of truth for feature requirements
- Ensure that all acceptance tests align with the Gherkin scenarios in the README
- When implementing new features, refer to the Gherkin documentation first
- Use the Gherkin scenarios to guide the development process and testing strategy
- Clearly separate and document:
  - User Goals: Why the user wants the feature (business value)
  - User Stories: What the user wants to do (user perspective)
  - Design Decisions: How we'll implement it (technical approach)
  - Specifications: Detailed requirements (testable criteria)

### Git Commit Messages

Follow the Conventional Commits specification with these guidelines:

- Format: `<type>(<scope>): <description>`
  - Types:
    - feat: New feature
    - fix: Bug fix
    - refactor: Code change that neither fixes a bug nor adds a feature
    - style: Changes that do not affect the meaning of the code
    - docs: Documentation only changes
    - test: Adding missing tests or correcting existing tests
    - chore: Changes to the build process or auxiliary tools
  - Scope: Optional, indicates section of codebase (e.g., models, ui, auth)
  - Description: Present tense, lowercase, no period at end

- Body format:
  ```
  <type>(<scope>): <description>

  <detailed explanation of the change>

  - <bullet points for specific changes>
  - <another specific change>
  ```

- Examples:
  ```
  fix(models): prevent invalid stat values in character calculations

  Fixes issue where stats could be calculated as 0, causing invalid clamp operations.
  Ensures game mechanics remain valid while preventing errors.

  - Added minimum value constraints for HP
  - Added minimum value constraints for Life
  - Added minimum value constraints for Power
  - Added upper bounds for all stats
  ```

  ```
  feat(ui): add spell selection dialog

  Implements new spell selection interface with search and filtering.

  - Added SpellSelectionDialog widget
  - Implemented spell search functionality
  - Added spell category filters
  - Added spell level sorting
  ```

When writing commit messages:
- Be specific about what changed and why
- Include context that future developers would find helpful
- Reference any relevant issue numbers
- Keep lines in description under 72 characters
- Use bullet points for listing specific changes
- Separate subject from body with a blank line

### Cursor Commit Message Generation

After making any code changes, Cursor MUST:
1. Generate a commit message following the above format
2. Include the commit message in a "Suggested Git Commit" section at the end of the response
3. Format the suggested commit message in a code block
4. Ensure the commit message accurately reflects ALL changes made in that response
5. Include both the short form (first line) and detailed form (with explanation and bullet points)

Example response format:
```
[Regular response explaining changes...]

Suggested Git Commit:
```git
feat(auth): implement user authentication flow

Add secure authentication system with email/password login.

- Created AuthService for handling authentication
- Added login and registration forms
- Implemented secure password hashing
- Added session management

Part of #789
```

### Documentation Updates

When new business rules or job stories are introduced, documentation MUST be automatically updated following these guidelines:

#### Business Rules Documentation
When a new business rule is introduced:
1. Add to README.md under the "Business Rules" section using the format:
```gherkin
Rule ID: BR-[sequential number]
Description: [Clear description of the business rule]
Validation: [How to validate the rule is being followed]
Examples:
- [Example 1 showing rule application]
- [Example 2 showing rule application]
Dependencies: [List any related rules]
```

#### Job Stories Documentation
When a new job story is introduced:
1. Add to README.md under the "Job Stories" section using the format:
```gherkin
Story ID: JS-[sequential number]
When [situation/context]
I want to [motivation/desire]
So that [expected outcome/benefit]

Acceptance Criteria:
1. [Criterion 1]
2. [Criterion 2]
3. [Criterion 3]

Related Business Rules: [List related BR-IDs]
```

#### Documentation Generation Rules
Cursor MUST:
1. Automatically identify new business rules or job stories in code changes
2. Generate corresponding documentation in README.md
3. Include both the documentation update and code changes in the same commit
4. Add a reference to the documentation in code comments where the rule is implemented
5. Ensure cross-references between related business rules and job stories are maintained

Example documentation update:
```gherkin
Rule ID: BR-12
Description: Character spell limit follows Fibonacci sequence based on WIL stat
Validation: Verify spell count matches Fibonacci number for character's WIL stat
Examples:
- WIL 1 allows 2 spells
- WIL 2 allows 3 spells
- WIL 3 allows 5 spells
Dependencies: BR-08 (Base Character Stats)

Story ID: JS-45
When I increase my character's WIL stat
I want to automatically gain access to more spell slots following the Fibonacci sequence
So that I can expand my magical capabilities in a balanced and progressive way

Acceptance Criteria:
1. Spell limit follows Fibonacci sequence based on WIL
2. UI shows current spell count and limit
3. Cannot exceed spell limit when selecting spells
4. Excess spells are removed if WIL decreases

Related Business Rules: BR-12
```
```

This format ensures that:
1. All business rules and job stories are properly documented
2. Documentation focuses on the context and motivation of features
3. Relationships between rules and stories are clear
4. Implementation details can be traced back to requirements
5. Changes are properly tracked and validated

You can paste this section directly into your `.mdc` file, just before the JSON schema section at the bottom.

The key difference in this version is the use of Job Stories instead of User Stories, which provides:
- Better context through the "When" situation
- Clearer motivation through the specific desire
- More concrete expected outcomes
- Focus on the situation rather than user roles
- More specific and actionable requirements